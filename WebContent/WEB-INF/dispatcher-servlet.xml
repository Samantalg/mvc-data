<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- permite el escaneo de componentes a partir de un paquete base -->
	<context:component-scan
		base-package="com.openwebinars"></context:component-scan>

	<!-- añadimos para que toda la gestión de mvc se vaya haciendo a través 
		de anotaciones -->
	<mvc:annotation-driven />
	
	<mvc:view-controller path="/" view-name="hello"/>

	<!-- se encarga de pasar de un controlador a una vista -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- definimos el origen de datos con el que vamos a trabajar; en nuestro 
		caso, será una base de datos H2 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:./ejemplo" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<!-- definimos el adaptador de JPA a una implementación concreta. En nuestro 
		caso, la implementación de JPA que usaremos será la de Hibernate. -->
	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="generateDdl" value="true" />
		<property name="database" value="H2" />
	</bean>

	<!-- configuramos el Entity Manager. Este se construye sobre los dos beans 
		anteriores; también tenemos que proporcionarle la ruta del paquete donde 
		se definen las clases que serán almacenadas en la base de datos -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<!-- spring based scanning for entity classes -->
		<property name="packagesToScan"
			value="com.openwebinars.model" />
	</bean>

	<!-- definimos el gestor de transacciones e indicamos que pueden ser definidas 
		mediante anotaciones -->
	<!-- Configure the transaction manager bean -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<!-- Enable annotation driven transaction management -->
	<tx:annotation-driven />

<!-- indicamos que clases serán repositorios de datos.  -->
	<jpa:repositories
		base-package="com.openwebinars.repo"></jpa:repositories>

</beans>